#!/usr/bin/env python3

import json
import os.path
import shutil
import sys
from argparse import ArgumentParser
from pathlib import Path
from subprocess import check_call
from tempfile import TemporaryDirectory
from urllib.parse import urlparse
from urllib.request import BaseHandler, HTTPBasicAuthHandler, HTTPCookieProcessor
from urllib.request import HTTPPasswordMgrWithDefaultRealm, Request, build_opener

from revng.support import get_root


def log(message):
    sys.stderr.write(message + "\n")


class RevertableMoves:
    def __enter__(self):
        self.undo_actions = []
        return self

    def move(self, source, destination):
        shutil.move(source, destination)
        self.undo_actions.append((destination, source))

    def __exit__(self, exc_type, exc_value, traceback):
        if exc_value is not None:
            log("Restoring all the original files due to an error")
            for source, destination in reversed(self.undo_actions):
                shutil.move(source, destination)
        return False


def main():
    revng_dir = (get_root() / "..").resolve()
    config_path = revng_dir / "config.json"

    with open(config_path, "r") as config_json:
        configuration: dict = json.load(config_json)

    argparser = ArgumentParser()
    argparser.add_argument(
        "--check", action="store_true", help="Download and install updates if available"
    )
    argparser.add_argument(
        "--force", action="store_true", help="Force update even if no new versions are available"
    )
    argparser.add_argument("--switch-to", help="Change branch")
    argparser.add_argument("--update-url", help="Manually specify the update URL")

    args = argparser.parse_args()

    if args.switch_to and args.update_url:
        log("Cannot specify both --switch-to and --update-url")
        return 1

    if args.switch_to is not None:
        branch = args.switch_to
    else:
        branch = configuration.get("branch")
        if branch in (None, ""):
            log("config.json does not have a branch specified")
            return 1

    if args.update_url:
        update_url = args.update_url
    else:
        update_url = f"https://rev.ng/downloads/revng-distributable/{branch}.tar.xz"

    handlers: list[BaseHandler] = [HTTPCookieProcessor()]
    if configuration.get("user") not in (None, ""):
        password_manager = HTTPPasswordMgrWithDefaultRealm()
        password_manager.add_password(
            None, "https://rev.ng/", configuration["user"], configuration["pass"]
        )
        handlers.append(HTTPBasicAuthHandler(password_manager))

    opener = build_opener(*handlers)
    head_request = opener.open(Request(update_url, method="HEAD"))
    if head_request.status != 200:
        log("Could not fetch update info")
        return 2

    latest_version_tar_name = os.path.basename(urlparse(head_request.url).path)
    if latest_version_tar_name == configuration["last-archive"]:
        if args.force:
            log(f"No new version available for branch {branch}, reinstalling anyway.")
        else:
            log(f"You are using the latest version of branch {branch}")
            return 0
    else:
        log(f"Update available for branch {branch} ({latest_version_tar_name})")

    if args.check:
        return 1

    with TemporaryDirectory(dir=revng_dir) as new_revng_install:
        log(f"Using temporary directory {new_revng_install}")
        new_revng_install_path = Path(new_revng_install)

        download_request = opener.open(update_url)
        size = int(download_request.headers.get("Content-Length"))
        log(f"Downloading update ({size // (1024 ** 2)} MB)...")

        save_to = new_revng_install_path / latest_version_tar_name
        with open(save_to, "wb") as local_file:
            written = 0
            chunk_size = 1024**2
            next_percentage = 10
            while written < size:
                data = download_request.read(chunk_size)
                local_file.write(data)
                written += len(data)
                if int(100 * written / size) >= next_percentage:
                    log(f"{next_percentage}%")
                    next_percentage += 10

        log("Extracting update...")
        check_call(
            ["tar", "--strip-components=1", "--extract", "--file", str(save_to)],
            cwd=new_revng_install
        )

        # Drop the archive
        save_to.unlink()

        # We're going to move files around, if anything goes wrong, revert all
        # the moves
        with RevertableMoves() as mover:
            log("Moving old files into temporary directory...")
            backup_path = new_revng_install_path / "backup"
            backup_path.mkdir()
            for top_level_file in configuration["top-level-files"]:
                source = revng_dir / top_level_file
                if source.exists():
                    mover.move(source, backup_path / top_level_file)
                else:
                    log(f'Warning: "{top_level_file}" has been deleted')

            log("Applying update...")
            new_top_level_files = [
                x for x in new_revng_install_path.iterdir() if x.name != "backup"
            ]
            for new_top_level_file in new_top_level_files:
                destination = revng_dir / new_top_level_file.name
                if destination.exists():
                    raise Exception(
                        f'Error: "{new_top_level_file}" already exists. '
                        + "Remove it and relaunch the update"
                    )
                mover.move(new_top_level_file, destination)

            log("Running post-update script...")
            check_call(
                [str(get_root() / "share/revng-distributable/post-update")],
                cwd=revng_dir,
            )

            # Update and save the configuration
            log("Committing new config.json...")
            configuration["branch"] = branch
            configuration["top-level-files"] = [f.name for f in new_top_level_files]
            configuration["last-archive"] = latest_version_tar_name
            with open(config_path, "w") as config_json:
                json.dump(configuration, config_json, indent=4)
                config_json.write("\n")

        log("Done!")

    return 0


if __name__ == "__main__":
    sys.exit(main())
