#!/usr/bin/env python3

import argparse
import os
import re
import sys
from pathlib import Path
from tarfile import open as tar_open
from typing import NoReturn

INSTALL_DIRECTORY = Path(f"{os.environ['DESTDIR']}{os.environ['ORCHESTRA_ROOT']}")
ORCHESTRA_SHARE = INSTALL_DIRECTORY / "share/orchestra"
SAVE_DIRECTORY = ORCHESTRA_SHARE / "save_for_later"


def fail(msg: str) -> NoReturn:
    sys.stderr.write(f"{msg}\n")
    sys.exit(1)


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("-i", "--input", type=str, help="Input Directory")
    parser.add_argument("name", type=str)
    parser.add_argument("pattern", type=str, nargs="+")
    return parser.parse_args()


def main():
    args = parse_args()
    patterns = [re.compile(p) for p in args.pattern]

    if args.input is not None:
        if not os.path.isdir(args.input):
            fail("Input directory does not exist")
        os.chdir(args.input)

    selected_files = []
    for root, _, files in os.walk("."):
        for file in files:
            full_file = os.path.join(root, file)[2:]
            if any(p.match(full_file) for p in patterns):
                selected_files.append(full_file)

    if not SAVE_DIRECTORY.is_dir():
        SAVE_DIRECTORY.mkdir(parents=True, exist_ok=True)

    target_file = SAVE_DIRECTORY / f"{args.name}.tar.xz"
    with tar_open(target_file, "w:xz", preset=3) as tarfile:
        for file in selected_files:
            tarfile.add(file)
    for file in selected_files:
        os.remove(file)


if __name__ == "__main__":
    main()
