#@ load("@ytt:data", "data")
#@ load("@ytt:template", "template")

#@ load("/lib/fn-args.lib.yml", "mandatory")
#@ load("/lib/util.lib.yml", "datavalue")

#@yaml/text-templated-strings
---
#@ def pip_package(
#@        name=mandatory,
#@        requirements=mandatory,
#@        dependencies=[]
#@  ):
(@= name @):
  builds:
    default:
      dependencies:
      - host-libc
      #@ if name != "python-base-packages":
      - python-base-packages
      #@ end
      - #@ template.replace(dependencies)
      build_dependencies:
      - host-c-toolchain
      configure: |-
        mkdir -p "$BUILD_DIR"
        cd "$BUILD_DIR"
        cat > requirements.txt <<'EOF'
        (@= requirements @)
        EOF

        pip-package-list.py \
          (@= name @) \
          -r requirements.txt \
          > packages.csv

        mkdir -p packages
        cd packages
        while IFS=, read -r NAME URL; do
          fetch.sh "$URL"
          echo "$NAME" >> "../package-list.txt"
        done < ../packages.csv
      install: |-
        cd "$BUILD_DIR"
        export HARD_FLAGS_COMPILE="-I"$("${ORCHESTRA_DOTDIR}/support/get-python-path" include)" $HARD_FLAGS_COMPILE"
        export HARD_ALLOWED_INCLUDE_PATH="$HARD_ALLOWED_INCLUDE_PATH:/tmp"
        export HARD_ALLOWED_LIBRARY_PATH="$HARD_ALLOWED_LIBRARY_PATH:/tmp"
        python \
          -m pip \
          --disable-pip-version-check \
          --no-python-version-warning \
          install \
          --compile \
          --no-deps \
          --no-index \
          --no-build-isolation \
          --no-warn-script-location \
          --ignore-installed \
          --root "$DESTDIR" \
          --verbose \
          packages/*

        PYTHON_PACKAGES_DIR="$DESTDIR$ORCHESTRA_ROOT/share/orchestra/python-packages/"
        mkdir -p "$PYTHON_PACKAGES_DIR"
        cp \
          -a \
          package-list.txt \
          "$PYTHON_PACKAGES_DIR/(@= name @).txt"
#@ end
