#@ load("@ytt:data", "data")

#! returned values are wrapped with dict() so we can call items() on them

#@ def _libc_optimization_flavors():
default: -ggdb3
o0: -ggdb3 -Wl,--gc-sections -ffunction-sections -O0
o1: -ggdb3 -Wl,--gc-sections -ffunction-sections -O1
o2: -ggdb3 -Wl,--gc-sections -ffunction-sections -O2
o3: -ggdb3 -Wl,--gc-sections -ffunction-sections -O3
#@ end

#@ libc_optimization_flavors = dict(_libc_optimization_flavors())

#@ common_flags = "-ggdb3"

#@yaml/text-templated-strings
---
#@ def _typical_project_flavors(use_asan=False):
#@   asan="-fsanitize=address" if use_asan else ""
optimized:
  cmake_build_type: Debug
  extra_compiler_flags: (@= common_flags @) -O2 -fno-omit-frame-pointer (@= asan @)
  ndebug: false
debug:
  cmake_build_type: Debug
  extra_compiler_flags: (@= common_flags @) -O0 (@= asan @)
  ndebug: false
release:
  cmake_build_type: Release
  extra_compiler_flags: (@= common_flags @) -O2 (@= asan @)
  ndebug: true
#@ end

---
#@ def typical_project_flavors(use_asan=False):
#@    return dict(_typical_project_flavors(use_asan=use_asan))
#@ end

#@yaml/text-templated-strings
---
#@ def _typical_cmake_flavors(use_asan=False):
#@   asan="-fsanitize=address" if use_asan else ""
optimized:
  cmake_build_type: Debug
  extra_compiler_flags: (@= common_flags @) -O2 -fno-omit-frame-pointer (@= asan @)
  ndebug: false
debug:
  cmake_build_type: Debug
  extra_compiler_flags: (@= common_flags @) -O0 (@= asan @)
  ndebug: false
release:
  cmake_build_type: Release
  extra_compiler_flags: (@= common_flags @) -O2 (@= asan @)
  ndebug: true
#@ end

---
#@ def typical_cmake_flavors(use_asan=False):
#@    return dict(_typical_cmake_flavors(use_asan=use_asan))
#@ end
