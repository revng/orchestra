#@ load("@ytt:data", "data")

#@ load("/lib/assert.lib.yml", "assert")
#@ load("/lib/fn_args.lib.yml", "mandatory")
#@ load("/lib/shell.lib.yml", "expand_args")
#@ load("/lib/optimization_flavors.lib.yml", "typical_cmake_flavors")

---
#@ def default_cmake_args():
-DCMAKE_EXPORT_COMPILE_COMMANDS: "ON"
-DCMAKE_INSTALL_SO_NO_EXE: "0"
-DCMAKE_INSTALL_PREFIX: "$ORCHESTRA_ROOT"
#@ end

#@yaml/text-templated-strings
---
#@ def _cmake(additional_cmake_args={}):
#@ cmake_args = dict(default_cmake_args())
#@ cmake_args.update(dict(additional_cmake_args))
- |
  cmake \
    (@= expand_args(cmake_args) -@)
#@ end

---
#@ def cmake(additional_cmake_args={}):
#@ return _cmake(additional_cmake_args=additional_cmake_args)[0]
#@ end

#@yaml/text-templated-strings
---
#@ def cmdline_cmake_base_configuration(
#@        is_windows=mandatory,
#@        cmake_generator=mandatory,
#@        cmake_build_type=mandatory,
#@        extra_compiler_flags="",
#@        extra_c_flags="",
#@        extra_cxx_flags="",
#@  ):
#@ if is_windows:
-DCMAKE_C_COMPILER: x86_64-w64-mingw32-clang
-DCMAKE_CXX_COMPILER: x86_64-w64-mingw32-clang++
-DCMAKE_INSTALL_PREFIX: "$ORCHESTRA_ROOT/x86_64-w64-mingw32"
-DCMAKE_PREFIX_PATH: "$ORCHESTRA_ROOT/x86_64-w64-mingw32"
-DCMAKE_SKIP_RPATH: "ON"
-DCMAKE_SYSTEM_NAME: "Windows"
-DCMAKE_CROSSCOMPILING: "TRUE"
-DCMAKE_CXX_FLAGS: "-pthread -stdlib=libc++ -D_WIN32_WINNT=0x6000 -D_LIBCPP_HAS_THREAD_API_WIN32 -fvisibility-inlines-hidden -fvisibility=hidden -fgnuc-version=4.8.0 -fuse-ld=lld (@= extra_compiler_flags @) (@= extra_cxx_flags @)"
#@ else:
-DCMAKE_C_COMPILER: #@ data.values.regular_c_compiler
-DCMAKE_CXX_COMPILER: #@ data.values.regular_cxx_compiler
-DCMAKE_CXX_FLAGS: "(@= extra_compiler_flags @) (@= extra_cxx_flags @)"
#@ end
-DCMAKE_C_FLAGS: "(@= extra_compiler_flags @) (@= extra_c_flags @)"
-DCMAKE_BUILD_RPATH: "$RPATH_PLACEHOLDER/lib:$RPATH_PLACEHOLDER/(@= data.values.sanitizers_libs_path @):$RPATH_PLACEHOLDER/lib/revng/analyses"
-DCMAKE_INSTALL_RPATH: "$RPATH_PLACEHOLDER/lib:$RPATH_PLACEHOLDER/(@= data.values.sanitizers_libs_path @):$RPATH_PLACEHOLDER/lib/revng/analyses"
-DCMAKE_BUILD_TYPE: #@ cmake_build_type
-DCMAKE_GENERATOR: #@ cmake_generator
#@ end

---

#@ def _cmake_boost_configuration():
-DBOOST_ROOT: "$ORCHESTRA_ROOT"
-DBoost_NO_BOOST_CMAKE: "On"
-DBoost_NO_SYSTEM_PATHS: "On"
#@ end

#@ cmake_boost_configuration = _cmake_boost_configuration()

---
#@ def build_system_to_cmake_generator():
make: "Unix Makefiles"
ninja: "Ninja"
#@ end

#@yaml/text-templated-strings
---
#@ def typical_cmake_builds(
#@        extra_cmake_args={},
#@        build_system="Ninja",
#@        dependencies=[],
#@        build_dependencies=[],
#@        use_asan=False,
#@        source_url=None,
#@        pre_configure_script="",
#@        post_configure_script="",
#@        pre_install_script="",
#@        post_install_script="",
#@        test=False,
#@        is_windows=False,
#@ ):
#@ build_system = build_system.lower()
#@ assert(build_system in build_system_to_cmake_generator())
#@ cmake_generator = build_system_to_cmake_generator()[build_system]

#@ for flavor, opts in typical_cmake_flavors(use_asan=use_asan).items():
(@= flavor @):
  #@ additional_cmake_args = dict(cmdline_cmake_base_configuration(is_windows=is_windows, cmake_generator=cmake_generator, cmake_build_type=opts["cmake_build_type"], extra_compiler_flags=opts["extra_compiler_flags"]))
  #@ additional_cmake_args.update(dict(extra_cmake_args))
  configure: |
    (@- if pre_configure_script: @)
    (@= pre_configure_script @)
    (@ end -@)
    (@- if source_url: @)
    extract.sh "(@= source_url @)"
    (@ end -@)

    mkdir -p "$BUILD_DIR"

    cd "$BUILD_DIR"
    (@= cmake(additional_cmake_args=additional_cmake_args) @) \
      "$SOURCE_DIR"

    (@- if post_configure_script: @)
    (@= post_configure_script @)
    (@ end -@)

  install: |
    (@- if pre_install_script: @)
    (@= pre_install_script @)
    (@ end -@)

    cmake --build "$BUILD_DIR" ${JOBS:+-j$JOBS}
    cmake --install "$BUILD_DIR"

    (@- if test: @)
    if test "$RUN_TESTS" -eq 1; then
      cd "$BUILD_DIR"
      ctest --output-on-failure ${JOBS:+-j$JOBS}
      cd -
    fi
    (@ end -@)

    (@- if post_install_script: @)
    (@= post_install_script @)
    (@ end -@)

  #@ if/end dependencies:
  dependencies: #@ dependencies

  #@ if/end build_dependencies:
  build_dependencies: #@ build_dependencies

  #@ if/end opts["ndebug"] == False:
  ndebug: false
#@ end

#@ end
