#@ load("@ytt:data", "data")
#@ load("@ytt:template", "template")

#@ load("/lib/fn-args.lib.yml", "mandatory")
#@ load("/lib/shell.lib.yml", "expand_args")
#@ load("/lib/optimization-flavors.lib.yml", "typical_cmake_flavors")

#@yaml/text-templated-strings
---
#@ def _cmake():
- |
  cmake \
    -DCMAKE_INSTALL_MESSAGE=NEVER \
    -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
    -DCMAKE_INSTALL_SO_NO_EXE=0 \
    -DCMAKE_INSTALL_PREFIX="$ORCHESTRA_ROOT" \
    -DCMAKE_PREFIX_PATH="$ORCHESTRA_ROOT"
#@ end
#@ cmake = _cmake()[0].rstrip()

#@yaml/text-templated-strings
---
#@ def cmdline_cmake_base_configuration(
#@        cmake_build_type=mandatory,
#@        extra_compiler_flags="",
#@        extra_c_flags="",
#@        extra_cxx_flags="",
#@  ):
- -DCMAKE_C_COMPILER="(@= data.values.regular_c_compiler @)"
- -DCMAKE_CXX_COMPILER="(@= data.values.regular_cxx_compiler @)"
- -DCMAKE_C_FLAGS="(@= extra_compiler_flags @) (@= extra_c_flags @)"
- -DCMAKE_CXX_FLAGS="(@= extra_compiler_flags @) (@= extra_cxx_flags @)"
- -DCMAKE_BUILD_RPATH="$RPATH_PLACEHOLDER/lib:$RPATH_PLACEHOLDER/(@= data.values.sanitizers_libs_path @):$RPATH_PLACEHOLDER/lib/revng/analyses"
- -DCMAKE_INSTALL_RPATH="$RPATH_PLACEHOLDER/lib:$RPATH_PLACEHOLDER/(@= data.values.sanitizers_libs_path @):$RPATH_PLACEHOLDER/lib/revng/analyses"
- -DCMAKE_BUILD_TYPE="(@= cmake_build_type @)"
- -DPython_FIND_VIRTUALENV=STANDARD
#@ end

---

#@ def _cmake_boost_configuration():
- -DBOOST_ROOT="$ORCHESTRA_ROOT"
- -DBoost_NO_BOOST_CMAKE=On
- -DBoost_NO_SYSTEM_PATHS=On
#@ end

#@ cmake_boost_configuration = _cmake_boost_configuration()

---

#@yaml/text-templated-strings
---
#@ def typical_cmake_builds(
#@        extra_cmake_args=[],
#@        extra_compiler_flags="",
#@        build_system="Ninja",
#@        dependencies=[],
#@        build_dependencies=[],
#@        use_asan=False,
#@        source_url=None,
#@        pre_configure_script="",
#@        post_configure_script="",
#@        pre_install_script="",
#@        post_install_script="",
#@        test=False,
#@ ):

#@ for flavor, opts in typical_cmake_flavors(use_asan=use_asan).items():
#@ flavor_extra_compiler_flags = opts["extra_compiler_flags"] + " " + extra_compiler_flags
(@= flavor @):
  configure: |
    (@ if pre_configure_script: @)
    (@-= pre_configure_script @)
    (@ end @)

    mkdir -p "$BUILD_DIR"

    (@ if source_url: @)
    export SOURCE_DIR="$BUILD_DIR/source"
    mkdir -p "$SOURCE_DIR"
    extract.sh "(@= source_url @)"
    (@ end @)

    cd "$BUILD_DIR";
    (@= cmake @) \
      "$SOURCE_DIR" \
      -G"(@= build_system @)" \
      (@= expand_args(cmdline_cmake_base_configuration(cmake_build_type=opts["cmake_build_type"], extra_compiler_flags=flavor_extra_compiler_flags)) @)
      (@- if extra_cmake_args: @) \
      (@= expand_args(extra_cmake_args) @)
      (@- end @)

    (@ if post_configure_script: @)
    (@= post_configure_script @)
    (@ end @)
  install: |
    (@ if pre_install_script: @)
    (@= pre_install_script @)
    (@ end @)

    cmake --build "$BUILD_DIR" ${JOBS:+-j$JOBS}

    (@ if test: @)
    if test "$RUN_TESTS" -eq 1; then
      cd "$BUILD_DIR"
      ctest --output-on-failure ${JOBS:+-j$JOBS}
      cd -
    fi
    (@ end @)

    cmake --install "$BUILD_DIR"

    (@ if post_install_script: @)
    (@= post_install_script @)
    (@ end @)
  #@ if/end dependencies:
  dependencies: #@ dependencies

  build_dependencies:
  - cmake
  #@ if/end build_system == "Ninja":
  - ninja
  - #@ template.replace(build_dependencies)

  #@ if/end opts["ndebug"] == False:
  ndebug: false
#@ end

#@ end
