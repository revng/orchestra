#@ load("@ytt:overlay", "overlay")
#@ load("/lib/fn-args.lib.yml", "mandatory")

#@yaml/text-templated-strings
---
#@ def mass_testing_config(
#@      report_name=mandatory,
#@      download_specs=[],
#@      pre_configure=None,
#@      post_install=None,
#@  ):
builds:
  default:
    build_dependencies:
    - ninja
    - revng-qa
    - revng
    - sqlite

    configure: |
      rm -rf "$BUILD_DIR/"{inputs,build}
      mkdir -p "$BUILD_DIR/"{inputs,build}
      cd "$BUILD_DIR"

      BASE_DIR="$ORCHESTRA_DOTDIR/support/mass-testing"
      export S3_ENDPOINT="$MASS_TESTING_S3_ENDPOINT"

      (@- if pre_configure: @)
      (@=- pre_configure @)
      (@- end @)

      # Download binaries from S3 given the yaml files describing what needs to
      # be downloaded
      "$BASE_DIR/download-binaries" \
        "$BUILD_DIR/inputs" \
        (@= " ".join(download_specs) @)

      # Copy revng's meta.yml file and add the missing parts (notes,
      # reproducer_prelude) via `generate-meta`
      cp -a "$ORCHESTRA_ROOT/share/revng/mass-testing-meta.yml" meta.yml
      "$BASE_DIR/generate-meta" >> meta.yml

      revng mass-testing configure \
        --meta meta.yml inputs build "$BASE_DIR/commands.yml"

    install: |
      cd "$BUILD_DIR"
      BASE_DIR="$ORCHESTRA_DOTDIR/support/mass-testing"
      revng mass-testing run build

      rm -rf report
      mkdir report
      revng mass-testing generate-report build report

      TARGET_DIR="${DESTDIR}${ORCHESTRA_ROOT}/share/mass-testing-reports/(@= report_name @)"
      mkdir -p "$TARGET_DIR"
      find report -maxdepth 1 -type f -exec cp -a {} "$TARGET_DIR" \;

      (@- if post_install: @)
      (@=- post_install @)
      (@ end -@)
#@ end

#@yaml/text-templated-strings
---
#@ def mass_testing_args():
report_name: all
download_specs:
- $BASE_DIR/inputs/mass.yml
post_install: |
  export S3_ENDPOINT="$MASS_TESTING_S3_ENDPOINT"

  # Generate a csv of passed tests and push it to S3
  "$BASE_DIR/generate-inclusions" report/main.db regression.autogenerated.csv
  "$BASE_DIR/s3" put regression.autogenerated.csv
#@ end

#@yaml/text-templated-strings
---
#@ def mass_testing_regression_args():
report_name: regression
download_specs:
- $BASE_DIR/inputs/regression.yml
pre_configure: |
  "$BASE_DIR/s3" get regression.autogenerated.csv
post_install: |
  IFS='|' read -r TOTAL OK < \
    <(sqlite3 -list report/main.db "SELECT COUNT(*), SUM(IIF(status = 'OK', 1, 0)) FROM main")

  if [ "$TOTAL" -ne "$OK" ]; then
    echo "Failed tests during regression!" >&2
    sqlite3 -list report/main.db "SELECT name FROM main WHERE status != 'OK'" >&2
    exit 1
  fi
#@ end

#@yaml/text-templated-strings
---
#@ def mass_testing_13_binaries_args():
report_name: 13_binaries
download_specs:
- $BASE_DIR/inputs/13_binaries.yml
#@ end

#@overlay/match by=overlay.all, expects=1
#@overlay/match-child-defaults missing_ok=True
---
components:
  mass-testing: #@ mass_testing_config(**mass_testing_args())
  mass-testing-regression: #@ mass_testing_config(**mass_testing_regression_args())
  mass-testing-13-binaries: #@ mass_testing_config(**mass_testing_13_binaries_args())
