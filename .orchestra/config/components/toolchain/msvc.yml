#@ load("@ytt:template", "template")
#@ load("@ytt:overlay", "overlay")
#@ load("/lib/fn-args.lib.yml", "mandatory")

#@ def vc12_params():
#! cl.exe version 12.00.8168
#! link.exe version 6.00.8168
#! Visual C++ from Visual Studio 6 (1998)
#! SDK version 5.0.1636.1
#! 32-bit host, 32-bit target
name: win32-vc12
triple: i386-winsdk-vc12
debug_info: true
extract: |
  fetch.sh \
    --no-copy \
    "https://archive.org/download/vsp600enu/VSP600ENU1.iso" \
    --save-as visual-studio-6-disc-1-english.iso

  7z \
    x \
    "${SOURCE_ARCHIVES}/visual-studio-6-disc-1-english.iso" \
    VC98/ \
    COMMON/MSDEV98/BIN/MSPDB60.DLL

  mv COMMON/MSDEV98/BIN/MSPDB60.DLL VC98/BIN/
bin: VC98/BIN/
include:
- VC98/INCLUDE
lib:
- VC98/LIB
#@ end

#@ def vc13_params():
#! cl.exe version 13.10.3077
#! link.exe version 7.10.3077
#! Visual C++ from Visual Studio 7.1 (.NET 2003)
#! Unknown SDK version, probably around 5.1 or 5.2
#! 32-bit host, 32-bit target
name: win32-vc13
triple: i386-winsdk-vc13
debug_info: false
extract: |
  fetch.sh \
    --no-copy \
    'https://archive.org/download/microsoft-visual-studio-.-net-2003-professional-disc-1/Microsoft%20Visual%20Studio%20.NET%202003%20Professional%20-%20Disc%201.iso' \
    --save-as visual-studio-71-disc-1-english.iso

  7z \
    x \
    "${SOURCE_ARCHIVES}/visual-studio-71-disc-1-english.iso" \
    'Program Files/Microsoft Visual Studio .NET 2003/Vc7' \
    'Program Files/Microsoft Visual Studio .NET 2003/Common7/IDE/mspdb71.dll'

  cp \
    'Program Files/Microsoft Visual Studio .NET 2003/Common7/IDE/mspdb71.dll' \
    'Program Files/Microsoft Visual Studio .NET 2003/Vc7/bin/'

  mv \
    'Program Files/Microsoft Visual Studio .NET 2003/Vc7' \
    .

  rm -rf 'Program Files'
bin: Vc7/bin/
include:
- Vc7/include
lib:
- Vc7/lib
#@ end

#@ def vc16_params():
#! cl.exe version 16.00.30319.01
#! link.exe version 10.00.30319.01
#! Visual C++ from Visual Studio 10.0 (2010)
#! SDK version 6.1.7600.16385 (7.0a)
#! 32-bit host, 32-bit target
name: win32-vc16
triple: i386-winsdk-vc16
debug_info: true
extract: |
  SOURCE_FILE="${SOURCE_ARCHIVES}/visual-studio-10-english.zip"
  if ! test -e "${SOURCE_FILE}"; then
    mkdir download
    cd download
    aria2c \
      -q \
      --seed-time=0 \
      'https://archive.org/download/vs2010_202102/vs2010_202102_archive.torrent' \
      'https://archive.org/download/vs2010_202102/vs2010.zip'
    mkdir -p "${SOURCE_ARCHIVES}"
    mv vs2010_202102/vs2010.zip "${SOURCE_FILE}"
    cd ..
    rm -rf download
  fi

  mkdir extract
  cd extract
  unzip "${SOURCE_FILE}"

  7z x VCExpress/Ixpvc.exe

  msiinfo export vs_setup.msi Directory | sed 's/\t/,/g' > dirs.csv
  msiinfo export vs_setup.msi File | sed 's/\t/,/g' > file.csv
  msiinfo export vs_setup.msi Component | sed 's/\t/,/g' > component.csv

  mkdir extract-vs-setup
  cd extract-vs-setup
  7z x ../vs_setup.cab
  cd ..

  rm -rf SourceDir/
  "$ORCHESTRA_DOTDIR"/support/vs10-create-directories.py --create-directories dirs.csv file.csv component.csv | while IFS=, read -r TARGET_NAME TARGET_PATH; do
      if ! test -e "extract-vs-setup/$TARGET_NAME"; then
          echo "Warning: $TARGET_NAME not found" > /dev/stderr
          continue
      fi

      mv "extract-vs-setup/$TARGET_NAME" "./$TARGET_PATH"
  done

  rm -rf extract-vs-setup

  cd 'SourceDir/Program Files/Microsoft Visual Studio 10.0/Common7/IDE/'
  find . -maxdepth 1 -type f -exec cp -a {} ../../VC/bin/ \;
  cd -

  mv \
    'SourceDir/Program Files/Microsoft Visual Studio 10.0/VC' \
    ../VC

  mv \
    'SourceDir/Program Files/Microsoft SDKs/Windows/v7.0A' \
    ../sdk-70a

  cd ..

  rm -rf extract
bin: VC/bin/
include:
- VC/include
- sdk-70a/Include
lib:
- VC/lib
- sdk-70a/Lib
#@ end

#@yaml/text-templated-strings
---
#@ def vs_17_params(name=mandatory, is_64=mandatory, vc_package=mandatory, sdk_package=mandatory, vc_path=mandatory, sdk_package_directory=mandatory, sdk_version=mandatory, sdk_path=mandatory):
name: (@= name @)
triple: (@= "x86_64" if is_64 else "i386" @)-winsdk-vc19
debug_info: true
extract: |
  fetch.sh \
    --no-copy \
    'https://aka.ms/vs/17/release/channel' \
    --save-as visual-studio-17-release-channel.json

  URL="$(cat "${SOURCE_ARCHIVES}/visual-studio-17-release-channel.json" | \
    jq -r '.channelItems | .[] | select(.id | contains("Microsoft.VisualStudio.Manifests.VisualStudio")).payloads[0].url')"

  fetch.sh \
    --no-copy \
    "$URL" \
    --save-as visual-studio-17-packages.json

  # Fetch MSVC and the SDK
  cat "${SOURCE_ARCHIVES}/visual-studio-17-packages.json" | \
    "$ORCHESTRA_DOTDIR"/support/parse-vs17-json.py \
    (@= vc_package @) \
    (@= sdk_package @) \
    > to-fetch.csv

  mkdir -p downloads
  while IFS="," read -r DIR NAME SHA256 URL; do
      DESTINATION="downloads/$DIR/$NAME"
      if ! test -e "$DESTINATION"; then
          mkdir -p "$(dirname $DESTINATION)"
          echo "Downloading $DESTINATION"
          while ! curl -s -L "$URL" > "$DESTINATION"; do
              echo "Retrying" < /dev/stderr
          done
      fi

      if ! echo "$SHA256 $DESTINATION" | sha256sum --check --status; then
        echo "Wrong hash for $(readlink -f $DESTINATION)" > /dev/stderr
        exit 1
      fi

  done < <(tail -n +2 to-fetch.csv)

  rm -f to-fetch.csv

  # Extract all the *.vsix files
  rm -rf extracted-vsix
  mkdir extracted-vsix
  cd extracted-vsix
  find ../downloads/ -name "*.vsix" -type f | while read VSIX_FILE; do
    python -c 'import zipfile; zipfile.ZipFile("'"$VSIX_FILE"'").extractall(".")'
  done
  cd ..

  rm -rf VC
  mv extracted-vsix/(@= vc_path @) VC
  rm -rf extracted-vsix

  # Extract all the *.cab of the SDK
  rm -rf extracted-cabs
  mkdir extracted-cabs
  cd extracted-cabs
  for CAB in ../downloads/(@= sdk_package_directory @)/Installers/*.cab; do
      yes S | 7z x "$CAB" || true
  done

  # Extract meta-information from MSI installsers
  rm -f all-dirs.csv all-file.csv all-component.csv
  for MSI in ../downloads/(@= sdk_package_directory @)/Installers/*.msi; do
      msiinfo export "$MSI" Directory | sed 's/\t/,/g' > dirs.csv
      msiinfo export "$MSI" File | sed 's/\t/,/g' > file.csv
      msiinfo export "$MSI" Component | sed 's/\t/,/g' > component.csv

      if test -e all-dirs.csv; then
          cat dirs.csv | tail -n +2 >> all-dirs.csv
          cat file.csv | tail -n +2 >> all-file.csv
          cat component.csv | tail -n +2 >> all-component.csv
          rm dirs.csv file.csv component.csv
      else
          mv dirs.csv all-dirs.csv
          mv file.csv all-file.csv
          mv component.csv all-component.csv
      fi
  done

  # Rename files
  "$ORCHESTRA_DOTDIR"/support/vs10-create-directories.py \
    --create-directories \
    all-dirs.csv \
    all-file.csv \
    all-component.csv | \
    while IFS=, read -r TARGET_NAME TARGET_PATH; do
        if ! test -e "$TARGET_NAME"; then
            echo "Warning: $TARGET_NAME not found" > /dev/stderr
            continue
        fi

        mv "$TARGET_NAME" "./$TARGET_PATH"
    done

  cd ..

  mv 'extracted-cabs/(@= sdk_path @)' windows-sdk

  rm -rf extracted-cabs/ downloads/

#@ target = "x64" if is_64 else "x86"
bin: VC/bin/Hostx86/(@= target @)/
include:
- VC/include
- windows-sdk/Include/(@= sdk_version @)/ucrt
lib:
- VC/lib/(@= target @)
- windows-sdk/Lib/(@= sdk_version @)/um/(@= target @)
- windows-sdk/Lib/(@= sdk_version @)/ucrt/(@= target @)
#@ end

#@ def vc19_32_params():
#! cl.exe version 19.37.32822
#! link.exe version 14.37.32822.0
#! Visual C++ v143 from Visual Studio 2022
#! SDK version 10.0.22621 (Windows 11)
#! 32-bit host, 32-bit target
#@ return vs_17_params("win32-vc19", False, "Microsoft.VisualStudio.Component.VC.14.37.17.7.x86.x64", "Microsoft.VisualStudio.Component.Windows11SDK.22621", "Contents/VC/Tools/MSVC/14.37.32822", "Win11SDK_10.0.22621", "10.0.22621.0", "SourceDir/Windows Kits/10")
#@ end

#@ def vc19_64_params():
#! cl.exe version 19.37.32822
#! link.exe version 14.37.32822.0
#! Visual C++ v143 from Visual Studio 2022
#! SDK version 10.0.22621 (Windows 11)
#! 32-bit host, 64-bit target
#@ return vs_17_params("win64-vc19", True, "Microsoft.VisualStudio.Component.VC.14.37.17.7.x86.x64", "Microsoft.VisualStudio.Component.Windows11SDK.22621", "Contents/VC/Tools/MSVC/14.37.32822", "Win11SDK_10.0.22621", "10.0.22621.0", "SourceDir/Windows Kits/10")
#@ end


#@yaml/text-templated-strings
---
#@ def create_vc_component(
#@     name=None,
#@     triple=None,
#@     extract=None,
#@     bin=None,
#@     include=None,
#@     lib=None,
#@     debug_info=None,
#@ ):
toolchain/(@= name @)/vc:
  binary_archives: private
  builds:
    default:
      build_dependencies:
      - python
      configure: |
        INSTALL_PATH="lib/vc/(@= triple @)"
        mkdir -p "$BUILD_DIR"
        cd "$BUILD_DIR"
        mkdir -p lib64
        test -e lib || ln -s lib64 lib
        mkdir -p "$BUILD_DIR/$INSTALL_PATH"
        cd "$BUILD_DIR/$INSTALL_PATH"

        (@= extract @)

        cat > cl.exe <<'EOF'
        #!/usr/bin/env bash

        SCRIPT_DIR="$( cd -- "$( dirname -- "${BASH_SOURCE[0]:-$0}"; )" &> /dev/null && pwd 2> /dev/null; )";

        set -euo pipefail

        # Genius
        shopt -s nocaseglob
        export INCLUDE="(@= ";".join(["$SCRIPT_DIR/" + path for path in include]) @)"
        export LIB="(@= ";".join(["$SCRIPT_DIR/" + path for path in lib]) @)"

        # Make sure we do not spawn any window (avoid lag)
        export DISPLAY=

        # Suppress wine debug information
        export WINEDEBUG="fixme-all,warn-all"

        # Disable .Net and mshtml
        export WINEDLLOVERRIDES="mscoree,mshtml="

        (@ if not triple.endswith("-vc12") and not triple.endswith("-vc13"): @)
            # Run one dedicated mspdbsrv.exe per instance of the executable
            export _MSPDBSRV_ENDPOINT_="$(python3 -c 'import uuid; print(uuid.uuid4())')"
            wine "$SCRIPT_DIR"/(@= bin @)/mspdbsrv.ex*e -start -spawn &
            MSPDBSRV_PID="$!"

            # Stop mspdbsrv.exe upon exit
            trap 'wine "$SCRIPT_DIR"/(@= bin @)/mspdbsrv.ex*e -stop || true' EXIT;

            # Wait for mspdbsrv.exe to be up and running
            while ! [[ "$(readlink -f "/proc/$MSPDBSRV_PID/exe")" == *"wine"* ]]; do
                sleep 0.2
            done
            sleep 0.2
        (@ end @)

        PROGRAM_NAME="$(basename $0)"
        (@ if triple.startswith("x86_64-"): @)
        if [[ "${PROGRAM_NAME}" =~ ^ml.exe$ ]]; then
            PROGRAM_NAME="ml64.exe"
        fi
        (@ end @)

        wine "$SCRIPT_DIR"/(@= bin @)/$PROGRAM_NAME "$@"

        EOF

        cp cl.exe dumpbin.exe
        cp cl.exe ml.exe

        chmod +x cl.exe
        chmod +x dumpbin.exe
        chmod +x ml.exe

        cd "$BUILD_DIR"
        mkdir -p bin

        cat > bin/(@= triple @)-cl <<'EOF'
        #!/bin/bash

        SCRIPT_DIR="$( cd -- "$( dirname -- "${BASH_SOURCE[0]:-$0}"; )" &> /dev/null && pwd 2> /dev/null; )";

        FILE_NAME="$(basename $0)"
        TRIPLE="${FILE_NAME%-*}"
        PROGRAM_NAME="${FILE_NAME##*-}"
        exec "$SCRIPT_DIR/../lib/vc/$TRIPLE/$PROGRAM_NAME.exe" "$@"
        EOF

        cp bin/(@= triple @)-cl bin/(@= triple @)-dumpbin
        cp bin/(@= triple @)-cl bin/(@= triple @)-ml

        chmod +x bin/(@= triple @)-cl
        chmod +x bin/(@= triple @)-dumpbin
        chmod +x bin/(@= triple @)-ml

      install: |
        cd "$BUILD_DIR"

        cp -far --reflink=auto "$BUILD_DIR/"* "${DESTDIR}${ORCHESTRA_ROOT}/"

        if test "$RUN_TESTS" -eq 1; then
          cat > test.c <<'EOF'
        #include <stdio.h>

        int main() {
          puts("Hello world!");
          return 0;
        }
        EOF

          WINE_TMP_DIRECTORY_32="$(mktemp --tmpdir tmp.wine-prefix.XXXXXXXXXX -d)"
          trap 'WINEPREFIX="$WINE_TMP_DIRECTORY_32" wineserver -k && rm -rf "$WINE_TMP_DIRECTORY_32"' EXIT

          (@ if debug_info: @)
          WINEPREFIX="$WINE_TMP_DIRECTORY_32" ./bin/(@= triple @)-cl test.c -nologo /DEBUG:FASTLINK /Zi
          (@ else: @)
          WINEPREFIX="$WINE_TMP_DIRECTORY_32" ./bin/(@= triple @)-cl test.c -nologo 
          (@ end @)
          export WINEDEBUG=-all

          if [[ "(@= triple @)" =~ ^x86_64- ]]; then
            WINE_TMP_DIRECTORY_64="$(mktemp --tmpdir tmp.wine-prefix.XXXXXXXXXX -d)"
            trap 'WINEPREFIX="$WINE_TMP_DIRECTORY_64" wineserver -k && rm -rf "$WINE_TMP_DIRECTORY_64"' EXIT
            WINEPREFIX="$WINE_TMP_DIRECTORY_64" wine64 test.exe
          else
            WINEPREFIX="$WINE_TMP_DIRECTORY_32" wine test.exe
          fi
        fi

#@ end

#@overlay/match by=overlay.all, expects=1
#@overlay/match-child-defaults missing_ok=True
---
components:
  _: #@ template.replace(create_vc_component(**vc12_params()))
  _: #@ template.replace(create_vc_component(**vc13_params()))
  _: #@ template.replace(create_vc_component(**vc16_params()))
  _: #@ template.replace(create_vc_component(**vc19_32_params()))
  _: #@ template.replace(create_vc_component(**vc19_64_params()))
