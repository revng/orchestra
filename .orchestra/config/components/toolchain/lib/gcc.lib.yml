#@ load("@ytt:data", "data")
#@ load("@ytt:template", "template")

#@ load("/lib/make.lib.yml", "make", "serial_make")
#@ load("/lib/fn_args.lib.yml", "mandatory")
#@ load("/lib/shell.lib.yml", "expand_args")

#@ load("/components/toolchain/lib/common.lib.yml", "new_gcc_path")

#@yaml/text-templated-strings
---
#@ def gcc_dependencies(stage, toolchain_name, musl_version, uclibc_version, linux_version, mingw64_version):
#@ if stage == 1:
#@   build = "~headers"
#@ elif stage == 2:
#@   build = ""
#@ else:
#@   fail("GCC stage must be 1 or 2")
#@ end

#@ if "host" not in toolchain_name:
- toolchain/(@= toolchain_name @)/binutils
- toolchain/host/binutils
#@ end

#@ if/end musl_version:
- toolchain/(@= toolchain_name @)/musl(@= build @)
#@ if/end uclibc_version:
- toolchain/(@= toolchain_name @)/uclibc(@= build @)
#@ if/end mingw64_version:
- toolchain/(@= toolchain_name @)/mingw64(@= build @)

#@ if/end linux_version:
- toolchain/(@= toolchain_name @)/linux-headers
#@ end

#@yaml/text-templated-strings
---
#@ def gcc_build_dependencies(stage, toolchain_name):

#@ if/end stage == 2 and "host" not in toolchain_name:
- toolchain/(@= toolchain_name @)/gcc~stage1

- glibc
- gmp
- mpfr
- mpc

#@ end


#@yaml/text-templated-strings
---
#@ def gcc_build(
#@    stage=mandatory,
#@    triple=mandatory,
#@    gcc_version=mandatory,
#@    toolchain_name=mandatory,
#@    musl_version=None,
#@    uclibc_version=None,
#@    linux_version=None,
#@    mingw64_version=None,
#@    extra_gcc_configure_options="",
#@    gcc_sysroot = None,
#@    extra_gcc_make_variables = "",
#@  ):

#@    source_url = "https://ftp.gnu.org/gnu/gcc/gcc-" + gcc_version + "/gcc-" + gcc_version + ".tar.gz"
#@    tmp_install_path = "$TMP_ROOT/x86_64-pc-linux-gnu/" + triple + "/gcc-bin/" + gcc_version
#@    gcc_sysroot = gcc_sysroot or "$ORCHESTRA_ROOT/" + triple

#@ if stage == 1:
#@    build_specific_configure_options = "--enable-languages=c"
#@ elif stage == 2:
#@    build_specific_configure_options = "--enable-languages=c,c++"
#@ else:
#@   fail("GCC stage must be 1 or 2")
#@ end
#@ dependencies = gcc_dependencies(stage, toolchain_name, musl_version, uclibc_version, linux_version, mingw64_version) or []
#@ build_dependencies = gcc_build_dependencies(stage, toolchain_name) or []

#! The sed is required to make `--sysroot=/` work with `--with-gxx-include-dir`
#! properly.
configure: |
  extract.sh --into "$SOURCE_DIR" "(@= source_url @)"
  patch-if-exists "${ORCHESTRA_DOTDIR}/patches/gcc-(@= gcc_version @)-cfns-fix-mismatch-in-gnu_inline-attributes.patch" "$SOURCE_DIR"
  patch-if-exists "${ORCHESTRA_DOTDIR}/patches/gcc-(@= gcc_version @)-cpp-musl-support.patch" "$SOURCE_DIR"
  patch-if-exists "${ORCHESTRA_DOTDIR}/patches/gcc-(@= gcc_version @)-fixes.patch" "$SOURCE_DIR"
  patch-if-exists "${ORCHESTRA_DOTDIR}/patches/gcc-(@= gcc_version @)-remove-dependency-on-libc_single_threaded.patch" "$SOURCE_DIR"
  sed -i 's|gcc_gxx_include_dir="${gcc_gxx_without_sysroot}"|gcc_gxx_include_dir="/${gcc_gxx_without_sysroot#/}"|' "$SOURCE_DIR/gcc/configure"
  (@ if "host" in toolchain_name: @)
  sed -i "s|SHLIB_LINK = .(CC)|\0 -L$ORCHESTRA_ROOT/link-only/lib|" "$SOURCE_DIR/libgcc/config/t-slibgcc"
  sed -i 's|@multilib_flags@||' "$SOURCE_DIR/libgcc/config/t-slibgcc"
  (@ end @)

  mkdir -p "$BUILD_DIR"
  cd "$BUILD_DIR"

  echo 'char __libc_single_threaded __attribute__ ((weak));' > fake-libc-single-threaded.c
  gcc -c -fPIC -x c fake-libc-single-threaded.c -o "$BUILD_DIR/fake-libc-single-threaded.o"

  "$SOURCE_DIR/configure" \
    --host=x86_64-pc-linux-gnu \
    --build=x86_64-pc-linux-gnu \
    --target=(@= triple @) \
    --prefix=$ORCHESTRA_ROOT \
    --bindir=$ORCHESTRA_ROOT/x86_64-pc-linux-gnu/(@= triple @)/gcc-bin/(@= gcc_version @) \
    --includedir=$ORCHESTRA_ROOT/lib/gcc/(@= triple @)/(@= gcc_version @)/include \
    --datadir=$ORCHESTRA_ROOT/share/gcc-data/(@= triple @)/(@= gcc_version @) \
    --mandir=$ORCHESTRA_ROOT/share/gcc-data/(@= triple @)/(@= gcc_version @)/man \
    --infodir=$ORCHESTRA_ROOT/share/gcc-data/(@= triple @)/(@= gcc_version @)/info \
    --with-sysroot=(@= gcc_sysroot @) \
    --enable-obsolete \
    --enable-secureplt \
    --disable-werror \
    --enable-nls \
    --without-included-gettext \
    --enable-checking=release \
    --enable-libstdcxx-time \
    --enable-poison-system-directories \
    --disable-host-shared \
    --enable-shared \
    --disable-libatomic \
    --disable-bootstrap \
    --disable-multilib \
    --disable-altivec \
    --disable-fixed-point \
    --disable-libgcj \
    --disable-libgomp \
    --disable-libmudflap \
    --disable-libssp \
    --disable-libcilkrts \
    --disable-vtable-verify \
    --disable-libvtv \
    --disable-libquadmath \
    --disable-rpath \
    --enable-lto \
    --disable-vtable-verify \
    --disable-libsanitizer \
    --with-gmp="$ORCHESTRA_ROOT" \
    --with-mpfr="$ORCHESTRA_ROOT" \
    --with-mpc="$ORCHESTRA_ROOT" \
    --without-zstd \
    (@= expand_args(extra_gcc_configure_options) @) \
    (@= expand_args(build_specific_configure_options) @) \
    CFLAGS="-w -ggdb3 -O3 (@= data.values.hard_flags_compile @)" \
    CXXFLAGS="-w -ggdb3 -O3 (@= data.values.hard_flags_compile @) -std=gnu++11" \
    LDFLAGS="(@= data.values.hard_flags_link @) (@= data.values.hard_flags_link_late @) -static-libgcc -static-libstdc++ $BUILD_DIR/fake-libc-single-threaded.o"
install: |
  cd "$BUILD_DIR"
  (@= make @) (@= extra_gcc_make_variables @)
  (@= serial_make @) install (@= extra_gcc_make_variables @)

  NEW_GCC_PATH="(@= new_gcc_path(triple=triple, gcc_version=gcc_version) @)"

  if test -e "${DESTDIR}${NEW_GCC_PATH}/gcc"; then

    if ! test -e "${DESTDIR}${NEW_GCC_PATH}/cc"; then
      ln -s gcc "${DESTDIR}${NEW_GCC_PATH}/cc"
    fi

    mkdir -p "${DESTDIR}${ORCHESTRA_ROOT}/link-only/bin"
    cp "${ORCHESTRA_DOTDIR}/support/hard-flags-compiler-wrapper.py" "${DESTDIR}${ORCHESTRA_ROOT}/link-only/bin/gcc"
    ln -s gcc "${DESTDIR}${ORCHESTRA_ROOT}/link-only/bin/cc"
    ln -s gcc "${DESTDIR}${ORCHESTRA_ROOT}/link-only/bin/x86_64-pc-linux-gnu-cc"
    ln -s gcc "${DESTDIR}${ORCHESTRA_ROOT}/link-only/bin/x86_64-pc-linux-gnu-gcc"

    cp -a "${DESTDIR}${ORCHESTRA_ROOT}"/lib/gcc/x86_64-pc-linux-gnu/(@= gcc_version @)/*.{a,o} "${DESTDIR}${ORCHESTRA_ROOT}"/lib/

  fi

  if test -e "${DESTDIR}${NEW_GCC_PATH}/g++"; then

    if ! test -e "${DESTDIR}${NEW_GCC_PATH}/c++"; then
      ln -s g++ "${DESTDIR}${NEW_GCC_PATH}/c++"
    fi

    cp "${ORCHESTRA_DOTDIR}/support/hard-flags-compiler-wrapper.py" "${DESTDIR}${ORCHESTRA_ROOT}/link-only/bin/g++"
    ln -s g++ "${DESTDIR}${ORCHESTRA_ROOT}/link-only/bin/x86_64-pc-linux-gnu-g++"
    mkdir -p "${DESTDIR}${ORCHESTRA_ROOT}/link-only/bin"
    ln -s g++ "${DESTDIR}${ORCHESTRA_ROOT}/link-only/bin/c++"
    ln -s g++ "${DESTDIR}${ORCHESTRA_ROOT}/link-only/bin/x86_64-pc-linux-gnu-c++"

  fi

  rm -f "${DESTDIR}${ORCHESTRA_ROOT}"/lib64/libcc1.*

  # Fixinclude locates the wrong pthread.h
  find "${DESTDIR}${ORCHESTRA_ROOT}" -type d -name include-fixed -exec rm -f {}/pthread.h \;

  (@- if "host" in toolchain_name: @)
  "$ORCHESTRA_DOTDIR"/support/save-for-later \
    -i "${DESTDIR}${ORCHESTRA_ROOT}" \
    gcc-runtime \
    '^lib(|32|64)\/lib[^/]*$'
  (@- end @)

dependencies: #@ dependencies
build_dependencies: #@ build_dependencies
#@ end

#@yaml/text-templated-strings
---
#@ def create_gcc_component(**kwargs):
license: COPYING
default_build: stage2
builds:
  stage1: #@ gcc_build(stage=1, **kwargs)
  stage2: #@ gcc_build(stage=2, **kwargs)
add_to_path:
  - ${ORCHESTRA_ROOT}/x86_64-pc-linux-gnu/(@= kwargs["triple"] @)/gcc-bin/(@= kwargs["gcc_version"] @)
#@ end
