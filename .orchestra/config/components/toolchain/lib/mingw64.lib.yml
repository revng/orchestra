#@ load("@ytt:template", "template")

#@ load("/lib/make.lib.yml", "make")
#@ load("/lib/fn_args.lib.yml", "mandatory")
#@ load("/lib/assert.lib.yml", "assert")
#@ load("/lib/create_component.lib.yml", "single_build_component")

#@ load("/components/toolchain/lib/common.lib.yml", "new_gcc_path")


#@yaml/text-templated-strings
---
#@ def common_install_script(triple=mandatory):
- |
  (@= make @)
  (@= make @) install
  rm -f "${TMP_ROOT}${ORCHESTRA_ROOT}/(@= triple @)/mingw"
  ln -s . "${TMP_ROOT}${ORCHESTRA_ROOT}/(@= triple @)/mingw"
  rm -f "${TMP_ROOT}${ORCHESTRA_ROOT}/(@= triple @)/(@= triple @)"
  ln -s . "${TMP_ROOT}${ORCHESTRA_ROOT}/(@= triple @)/(@= triple @)"
  rm -f "${TMP_ROOT}${ORCHESTRA_ROOT}/(@= triple @)/sys-include"
  ln -s ./include "${TMP_ROOT}${ORCHESTRA_ROOT}/(@= triple @)/sys-include"
#@ end

#@yaml/text-templated-strings
---
#@ def mingw64_flavors(
#@    toolchain_name=mandatory,
#@    triple=mandatory,
#@    gcc_version=mandatory,
#@    mingw64_version=mandatory,
#@    build_type=mandatory,
#@ ):
#@ source_url = "https://downloads.sourceforge.net/project/mingw-w64/mingw-w64/mingw-w64-release/mingw-w64-v" + mingw64_version + ".tar.bz2"
headers:
  configure: |
    extract.sh --into "$BUILD_DIR" "(@= source_url @)"
    cd "$BUILD_DIR/mingw-w64-headers"
    ./configure \
      --disable-silent-rules \
      --target=(@= triple @) \
      --host=(@= triple @) \
      --build=x86_64-gentoo-linux-musl \
      --prefix="$ORCHESTRA_ROOT/(@= triple @)" \
      --enable-sdk \
      --enable-secure-api
  install: |
    cd "$BUILD_DIR/mingw-w64-headers"
    (@= common_install_script(triple)[0] @)

base:
  configure: |
    extract.sh --into "$BUILD_DIR" "(@= source_url @)"
    cd "$BUILD_DIR"
    NEW_GCC_PATH="(@= new_gcc_path(triple=triple, gcc_version=gcc_version) @)"
    NEW_GCC=${NEW_GCC_PATH}/(@= triple @)-gcc
    export CC="${NEW_GCC}"
    export CPPFLAGS="-I${ORCHESTRA_ROOT}/(@= triple @)/include"
    export CHOST="(@= triple @)"

    ./configure \
      --disable-silent-rules \
      --target=(@= triple @) \
      --host=(@= triple @) \
      --build=x86_64-gentoo-linux-musl \
      --prefix="$ORCHESTRA_ROOT/(@= triple @)" \
      --enable-sdk \
      --enable-secure-api \
      --with-sysroot=no \
      --with-headers \
      --with-crt \
      --without-libraries \
      $($NEW_GCC -E -dM - < /dev/null | grep -q __MINGW64__ && echo --disable-lib32 --enable-lib64 || echo --enable-lib32 --disable-lib64)
  install: |
    cd "$BUILD_DIR"
    (@= common_install_script(triple)[0] @)
    # Remove files already installed by mingw64-headers
    remove-files-from-other-component.sh "toolchain/(@= toolchain_name @)/mingw64-headers" "${TMP_ROOT}${ORCHESTRA_ROOT}"
  dependencies:
    - toolchain/(@= toolchain_name @)/gcc~stage1
    - toolchain/(@= toolchain_name @)/mingw64-headers

extra-libraries:
  configure: |
    extract.sh --into "$BUILD_DIR" "(@= source_url @)"
    cd "$BUILD_DIR"
    NEW_GCC_PATH="(@= new_gcc_path(triple=triple, gcc_version=gcc_version) @)"
    NEW_GCC=${NEW_GCC_PATH}/(@= triple @)-gcc
    export CC="${NEW_GCC}"
    export CPPFLAGS="-I${ORCHESTRA_ROOT}/(@= triple @)/include"
    export CHOST="(@= triple @)"

    ./configure \
      --disable-silent-rules \
      --target=(@= triple @) \
      --host=(@= triple @) \
      --build=x86_64-gentoo-linux-musl \
      --prefix="$ORCHESTRA_ROOT/(@= triple @)" \
      --enable-sdk \
      --enable-secure-api \
      --with-sysroot=no \
      --with-headers \
      --with-crt \
      --with-libraries=winpthreads \
      $($NEW_GCC -E -dM - < /dev/null | grep -q __MINGW64__ && echo --disable-lib32 --enable-lib64 || echo --enable-lib32 --disable-lib64)
  install: |
    cd "$BUILD_DIR"
    (@= common_install_script(triple)[0] @)

    mkdir -p "${TMP_ROOT}${ORCHESTRA_ROOT}/(@= toolchain_name @)/bin/"
    ln -s ../../(@= triple @)/usr/bin/libwinpthread-1.dll "${TMP_ROOT}${ORCHESTRA_ROOT}/(@= toolchain_name @)/bin/"

    # Remove files already installed by mingw64-headers and mingw64-base
    remove-files-from-other-component.sh "toolchain/(@= toolchain_name @)/mingw64-headers" "${TMP_ROOT}${ORCHESTRA_ROOT}"
    remove-files-from-other-component.sh "toolchain/(@= toolchain_name @)/mingw64-base" "${TMP_ROOT}${ORCHESTRA_ROOT}"
  dependencies:
    - toolchain/(@= toolchain_name @)/gcc~stage1
    - toolchain/(@= toolchain_name @)/mingw64-base
#@ end

#@yaml/text-templated-strings
---
#@ def create_mingw64_components(toolchain_name=mandatory, **kwargs):
#@ for type, options in dict(mingw64_flavors(toolchain_name=toolchain_name, **kwargs)).items():
(@= "toolchain/" + toolchain_name + "/mingw64-" + type @): #@ single_build_component(license="COPYING", **options)
#@ end
#@ end
