#@ load("@ytt:template", "template")
#@ load("@ytt:overlay", "overlay")

#@ load("/lib/make.lib.yml", "serial_make")
#@ load("/lib/fn_args.lib.yml", "mandatory")
#@ load("/lib/optimization_flavors.lib.yml", "libc_optimization_flavors")
#@ load("/components/toolchain/lib/common.lib.yml", "new_gcc_path", "binutils_path")

#@yaml/text-templated-strings
---
#@ def uclibc_build(
#@      toolchain_name=mandatory,
#@      triple=mandatory,
#@      uclibc_arch_name=mandatory,
#@      uclibc_version=mandatory,
#@      gcc_version=mandatory,
#@      binutils_version=mandatory,
#@      additional_cflags="",
#@ ):

#@   source_url = "https://uclibc.org/downloads/uClibc-" + uclibc_version + ".tar.bz2"
configure: |
  mkdir -p "$BUILD_DIR"
  extract.sh --into "$BUILD_DIR" "(@= source_url @)"
  cd "$BUILD_DIR"
  patch -p1 < "${ORCHESTRA_DOTDIR}/patches/blt-blo.patch"
  patch -p1 < "${ORCHESTRA_DOTDIR}/patches/uclibc-0071-Fix-libgcc_s_resume-issue.patch"
  echo 'false' > extra/config/lxdialog/check-lxdialog.sh
  (@= serial_make @) ARCH=(@= uclibc_arch_name @) defconfig
  cp "${ORCHESTRA_DOTDIR}/patches/uClibc.config" .config
  sed 's|$INSTALL_PATH|'"$ORCHESTRA_ROOT"'|g' .config -i
  sed 's|$FLAGS|(@= additional_cflags @)|g' .config -i
  true | (@= serial_make @) oldconfig
  sed 's|^typedef __kernel_dev_t\s*__kernel_old_dev_t;$|\0\ntypedef long __kernel_long_t;\ntypedef unsigned long __kernel_ulong_t;|' libc/sysdeps/linux/arm/bits/kernel_types.h -i
install: |
  (@= serial_make @) -C "$BUILD_DIR"
  (@= serial_make @) -C "$BUILD_DIR" install DESTDIR="${DESTDIR}${ORCHESTRA_ROOT}/(@= triple @)"

  # Remove files already installed by uclibc-headers
  remove-files-from-other-component.sh "toolchain/(@= toolchain_name @)/uclibc-headers" "${TMP_ROOT}${ORCHESTRA_ROOT}"
build_dependencies:
  - toolchain/(@= toolchain_name @)/gcc
#@ end

#@yaml/text-templated-strings
---
#@ def uclibc_headers_overlay(**kwargs):
#@    triple = kwargs["triple"]
#@    toolchain_name = kwargs["toolchain_name"]
install: |
  cd "$BUILD_DIR"
  (@= serial_make @) headers
  (@= serial_make @) DESTDIR="${DESTDIR}${ORCHESTRA_ROOT}/(@= triple @)" install_headers
#@overlay/remove
build_dependencies:
  - toolchain/(@= toolchain_name @)/gcc
#@ end

#@yaml/text-templated-strings
---
#@ def create_uclibc_components(**kwargs):
#@    toolchain_name = kwargs["toolchain_name"]
#@    triple = kwargs["triple"]
#@    uclibc_arch_name = kwargs["uclibc_arch_name"]
#@    uclibc_version = kwargs["uclibc_version"]
#@    gcc_version = kwargs["gcc_version"]
#@    binutils_version = kwargs["binutils_version"]
toolchain/(@= toolchain_name @)/uclibc-headers:
  license: COPYING.LIB
  builds:
    default: #@ overlay.apply(uclibc_build(**kwargs), uclibc_headers_overlay(**kwargs))

toolchain/(@= toolchain_name @)/uclibc-extra-libraries:
  license: COPYING.LIB
  default_build: default
  builds:
    #@ for flavor, flags in libc_optimization_flavors.items():
    (@= flavor @): #@ uclibc_build(additional_cflags=flags, **kwargs)
    #@ end
#@ end
