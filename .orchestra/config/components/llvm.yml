#@ load("@ytt:data", "data")
#@ load("@ytt:overlay", "overlay")
#@ load("/components/llvm_common.lib.yml", "configure_llvm")
#@ load("/lib/optimization_flavors.lib.yml", "typical_project_flavors")
#@ load("/lib/fn_args.lib.yml", "mandatory")
#@ load("/lib/ninja.lib.yml", "ninja")

#@yaml/text-templated-strings
---
#@ def cmake_opts():
- -DBUILD_SHARED_LIBS=ON
- -DLLVM_ENABLE_PROJECTS="clang"
- -DCMAKE_C_COMPILER="(@= data.values.regular_c_compiler @)"
- -DCMAKE_CXX_COMPILER="(@= data.values.regular_cxx_compiler @)"
#@ end

#@yaml/text-templated-strings
---
#@ def llvm_component(use_asan=False):
repository: llvm-project
license: llvm/LICENSE.TXT
default_build: optimized
builds:
  #@ for flavor, f_options in typical_project_flavors(use_asan=use_asan).items():
    #@ build_type = f_options["cmake_build_type"]
    #@ cflags = f_options["extra_compiler_flags"]
    #@ ndebug = f_options["ndebug"]
    (@= flavor @):
      configure: #@ configure_llvm(cmake_build_type=build_type, cflags=cflags, additional_cmake_options=cmake_opts(), source_dir="$SOURCE_DIR")
      install: |
        cd "$BUILD_DIR"
        (@= ninja @) install

        CLANG_RELEASE_IDX="$ORCHESTRA_ROOT/share/orchestra/clang-release.idx"
        if [ -e "$CLANG_RELEASE_IDX" ]; then
          cat "$CLANG_RELEASE_IDX" | while read f; do
            rm "${TMP_ROOT}${ORCHESTRA_ROOT}/$f" || true
          done
        fi

        if test "$RUN_TESTS" -eq 1; then
          (@= ninja @) check-all
        fi

      build_dependencies:
        - cmake
        - toolchain/host/cxx-toolchain
      dependencies:
        - toolchain/host/cxx-runtime
        - libunwind
      #@ if/end ndebug == False:
      ndebug: false
  #@ end
#@ end

#@overlay/match by=overlay.all, expects=1
#@overlay/match-child-defaults missing_ok=True
---
components:
  llvm: #@ llvm_component()
