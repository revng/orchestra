#@ load("@ytt:data", "data")
#@ load("@ytt:overlay", "overlay")
#@ load("/components/llvm_common.lib.yml", "configure_llvm")
#@ load("/lib/create_component.lib.yml", "single_build_component")
#@ load("/lib/ninja.lib.yml", "ninja")

---
#@ def cmake_opts():
- -DLLVM_ENABLE_PROJECTS="clang;compiler-rt;libcxxabi;libcxx;clang-tools-extra"
- -DBUILD_SHARED_LIBS=OFF
- -DLLVM_ENABLE_ZLIB=OFF
#@ end

#@yaml/text-templated-strings
---
#@ def clang_release_args():
#@    source_url = "https://github.com/llvm/llvm-project/archive/llvmorg-" + data.values.clang_release_version + ".tar.gz"
license: source/llvm/LICENSE.TXT
configure: |
  extract.sh --into "$BUILD_DIR/source" "(@= source_url @)"
  patch-if-exists "${ORCHESTRA_DOTDIR}/patches/clang-release-12.0.0-elf2yaml-wrong-comparisons.patch" "$BUILD_DIR/source"
  sed -i 's|GIT_FOUND|FALSE|g' "$BUILD_DIR/source/llvm/cmake/modules/VersionFromVCS.cmake"
  (@= configure_llvm(cmake_build_type="Release", cflags=" ", additional_cmake_options=cmake_opts(), source_dir="$BUILD_DIR/source") @)
install: |
  cd "$BUILD_DIR"

  (@= ninja @) install

  rm "${DESTDIR}${ORCHESTRA_ROOT}/lib64/libc++.so" || true
  echo 'INPUT(libc++.so.1 -lc++abi -lpthread)' > "${DESTDIR}${ORCHESTRA_ROOT}/lib64/libc++.so"

  if test -z "$DESTDIR"; then
    echo "Installing clang-release which will clobber LLVM!"
  else
    find ${DESTDIR}${ORCHESTRA_ROOT}/lib* -maxdepth 1 -not -type d \( -name libLLVM* -or -name libclang* \) -delete;
    rm ${DESTDIR}${ORCHESTRA_ROOT}/bin/opt || true
    rm ${DESTDIR}${ORCHESTRA_ROOT}/bin/llvm-config || true
    rm -rf ${DESTDIR}${ORCHESTRA_ROOT}/lib*/cmake/ || true
    rm -rf ${DESTDIR}${ORCHESTRA_ROOT}/include/clang/ || true
    rm -rf ${DESTDIR}${ORCHESTRA_ROOT}/include/clang-c/ || true
    rm -rf ${DESTDIR}${ORCHESTRA_ROOT}/include/llvm/ || true
    rm -rf ${DESTDIR}${ORCHESTRA_ROOT}/include/llvm-c/ || true
  fi

  mkdir -p "${DESTDIR}${ORCHESTRA_ROOT}/link-only/bin"
  cp "${ORCHESTRA_DOTDIR}/support/hard-flags-compiler-wrapper.py" "${DESTDIR}${ORCHESTRA_ROOT}/link-only/bin/clang"
  cp "${ORCHESTRA_DOTDIR}/support/hard-flags-compiler-wrapper.py" "${DESTDIR}${ORCHESTRA_ROOT}/link-only/bin/clang++"
build_dependencies:
  - cmake
dependencies:
  - toolchain/host/gcc-toolchain
  - libunwind
#@ end

#@overlay/match by=overlay.all, expects=1
#@overlay/match-child-defaults missing_ok=True
---
components:
  clang-release: #@ single_build_component(**clang_release_args())
