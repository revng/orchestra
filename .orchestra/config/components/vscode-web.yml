#@ load("@ytt:overlay", "overlay")
#@ load("@ytt:data", "data")

#@yaml/text-templated-strings
---
#@ def vscode_web_component():
repository: vscode
license: LICENSE.txt
default_build: default
binary_archives: private
builds:
  #@ for flavor in ["default", "debug"]:
  (@= flavor @):
    build_dependencies:
    - revng-js-prerequisites
    configure: |
      rm -rf "$BUILD_DIR/vscode"
      mkdir -p "$BUILD_DIR/vscode"
      cd "$BUILD_DIR/vscode"

      rsync -aq \
        --exclude=.git \
        --exclude-from=<(git -C "$SOURCE_DIR" ls-files --exclude-standard -oi --directory) \
        "$SOURCE_DIR/" .

      find . -type f -name yarn.lock -printf '%h\n' | \
      while IFS= read -r directory; do
        pushd "$directory" &> /dev/null
        "$ORCHESTRA_DOTDIR"/support/fetch-js-dependencies yarn
        popd &> /dev/null
      done
    install: |
      cd "$BUILD_DIR/vscode"
      rsync -aq \
        --exclude-from=<(git -C "$SOURCE_DIR" ls-files --exclude-standard -oi --directory) \
        "$SOURCE_DIR/" .

      # Install dependencies, this process is mostly offline with the following exceptions
      # (to the best of our knowledge):
      # * node-gyp downloading header tarballs to compile native modules for node and electron
      #   (This can be fixed once node is within orchestra)
      # * vscode-web, when building electron targets, will download the prebuilt electron for the
      #   target to bundle with the build js files (this will be accounted for when building
      #   targets using electron)
      ELECTRON_SKIP_BINARY_DOWNLOAD=1 \
      PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD=1 \
        yarn

      # Build vscode
      revng/web/build.sh \
        "${DESTDIR}${ORCHESTRA_ROOT}/share/vscode-web.tar.xz" \
        (@= "1" if flavor == "default" else "0" @)
  #@ end
#@ end

#@overlay/match by=overlay.all, expects=1
#@overlay/match-child-defaults missing_ok=True
---
components:
  vscode-web: #@ vscode_web_component()
