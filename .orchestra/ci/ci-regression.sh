#!/usr/bin/env bash
set -euo pipefail

# rev.ng CI regression script
# This script is run after the `ci-run.sh` has run and has successfully
# promoted a next-develop branch to develop. The purpose of this script is to
# promote the develop branch to master. The prerequisites for this are:
# * Passing some form of regression (typically, `mass-testing-regression`)
# * If present, a downstream pipeline which is expected to trigger downstream
#   tests and finish successfully if those pass
# If the above happens then the develop branches are promoted to master
# (triggering binary archive hooks in the process) and, if present, the
# downstream pipeline is triggered again.
#
# Mandatory environment variables:
#
# REVNG_ORCHESTRA_URL: orchestra git repo URL (must be git+ssh:// or git+https://)
# REGRESSION_SSH_PRIVATE_KEY:
#   base64-encoded key to push regression results to mass.rev.ng
# REGRESSION_RSYNC_TARGET:
#   prefix to use to rsync regression results. The results will be rsynced to
#   "$REGRESSION_RSYNC_TARGET/$TIMESTAMP_$JOBID"
#
# Optional environment variables:
#
# SSH_PRIVATE_KEY: private key used to push binary archives
# LFS_RETRIES: Number of times lfs pull/push operations are retried. Defaults to 3.

SCRIPT_DIR=$(realpath "$(dirname "${BASH_SOURCE[0]}")")
# shellcheck disable=SC1091
source "$SCRIPT_DIR/common.sh"

cd "$ORCHESTRA_REPO_DIR"
"$SCRIPT_DIR/install-dependencies.sh" --full

# Install revng-orchestra
for REVNG_ORCHESTRA_TARGET_BRANCH in next-develop develop master; do
    if pip3 -q install --user "$REVNG_ORCHESTRA_URL@$REVNG_ORCHESTRA_TARGET_BRANCH"; then
        break
    fi
done

# Make sure we can run orchestra
export PATH="$HOME/.local/bin:$PATH"
command -v orc > /dev/null

# Load ssh key, if present
if [ -n "${SSH_PRIVATE_KEY:-}" ]; then
  load_ssh_key

  # Change orchestra remote to ssh if we were given the URL
  if [[ -n "${ORCHESTRA_CONFIG_REPO_SSH_URL:-}" ]]; then
    git -C "$ORCHESTRA_REPO_DIR" remote set-url origin "$ORCHESTRA_CONFIG_REPO_SSH_URL"
  fi
fi
# Load ssh key to rsync
base64 -d <<< "$REGRESSION_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -

# Populate USER_OPTIONS
cat > "$USER_OPTIONS" <<EOF
$(get_user_options)

#@overlay/replace
branches:
  - develop
  - master

#@overlay/replace
build_from_source:
  - mass-testing-regression
EOF

# Print debug information
echo "User options:"
cat "$USER_OPTIONS"

# Update, this is needed here because 'pipeline_create' will run
# `orc ls --binary-archives`
orc update --no-config

# Start downstream pipeline, since it can take a while this and the run of
# the regression suite are started in parallel to optimize time
PIPELINE_ID=$(COMPONENT_TARGET_BRANCH=develop pipeline_create)

# Run regression suite
RC=0
orc --quiet install \
    --lfs-retries "$LFS_RETRIES" \
    mass-testing-regression || RC=$?

# Sync the regression results to mass.rev.ng
BASE_DIR=build/mass-testing-regression/default
REGRESSION_JSON="$BASE_DIR/check-regression.json"
RSYNC_FILTER=$(mktemp --tmpdir tmp.rsync-filter.XXXXXXXXXX)
{
  cat - <<EOF
+ /inputs/***/
+ /build/***/
+ /report
+ /report/*
+ check-regression.json
+ regression.autogenerated.csv
EOF
  jq -r '.[] | "+ /inputs/" + .name + ".*"' "$REGRESSION_JSON"
  jq -r '.[] | "+ /build/" + .name + "-" + .test_name + "-*/***"' "$REGRESSION_JSON"
  jq -r '.[] | "+ /report/" + .name + "-" + .test_name + "-*/***"' "$REGRESSION_JSON"
  echo '- *'
} > "$RSYNC_FILTER"

RSYNC_SUBDIR="${CI_JOB_STARTED_AT:-$(date --utc --iso-8601=seconds | sed 's;+00:00$;Z;')}"
if [ -n "${CI_JOB_ID:-}" ]; then
  RSYNC_SUBDIR+="_$CI_JOB_ID"
fi

rsync -qaz --stats \
  --delay-updates \
  --delete-after \
  --filter ". $RSYNC_FILTER" \
  --prune-empty-dirs \
  "$BASE_DIR/" \
  "$REGRESSION_RSYNC_TARGET/$RSYNC_SUBDIR/"

# If the orc install failed, exit prematurely
if [ "$RC" -ne 0 ]; then
  echo "Regression failed, you can see a detailed error report at this url:"
  echo "https://mass.rev.ng/regression/$RSYNC_SUBDIR/"
  exit "$RC"
fi

# Wait and check if the downstream pipeline has finished
pipeline_wait "$PIPELINE_ID"

#
# Promote develop to master and push
#
promote_branches develop master
export COMPONENT_TARGET_BRANCH=master
CHANGES_FILE="$(mktemp --tmpdir tmp.binary-archives-changes.XXXXXXXXXX)"
push_binary_archives "$CHANGES_FILE"
"$SCRIPT_DIR/binary-archives-hook.sh" "$CHANGES_FILE"

#
# Run the downstream pipeline, if needed
#
pipeline_wait "$(pipeline_create)"
